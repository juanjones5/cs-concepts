Typically used for strings
Trie is widely used in various applications, such as autocomplete, spell checker, etc.
The value of the node is exactly formed by the letters in the path from the root to the node sequentially.
One important property of Trie is that all the descendants of a node have a common prefix of the string 
associated with that node. That's why Trie is also called prefix tree.

Although hash table has O(1)O(1) time complexity for looking for a key, it is not efficient in the 
following operations :

Finding all keys with a common prefix.
Enumerating a dataset of strings in lexicographical order.

Another reason why trie outperforms hash table, is that as hash table increases in size, 
there are lots of hash collisions and the search time complexity could deteriorate to O(n)O(n), 
where nn is the number of keys inserted. Trie could use less space compared to Hash Table 
when storing many keys with the same prefix. In this case using trie has only O(m)O(m) time 
complexity, where mm is the key length. Searching for a key in a balanced tree 
costs O(m \log n)O(mlogn) time complexity.



            root (empty string)

a           b               c

am      ba      be      ce      co

        bad